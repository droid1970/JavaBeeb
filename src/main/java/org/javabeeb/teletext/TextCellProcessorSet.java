package org.javabeeb.teletext;

import java.util.HashMap;
import java.util.Map;

final class TextCellProcessorSet extends AbstractCellProcessorSet {

    private static final Map<Integer, CellProcessor> MAP = new HashMap<>();
    static {

        int code = 32;

        register(code++, TeletextAlphaDefinition.SPACE);
        register(code++, TeletextAlphaDefinition.EXCLAMATION_MARK);
        register(code++, TeletextAlphaDefinition.DOUBLE_QUOTE);
        register(code++, TeletextAlphaDefinition.POUND);
        register(code++, TeletextAlphaDefinition.DOLLAR);
        register(code++, TeletextAlphaDefinition.PERCENT);
        register(code++, TeletextAlphaDefinition.AMPERSAND);
        register(code++, TeletextAlphaDefinition.SINGLE_QUOTE);
        register(code++, TeletextAlphaDefinition.OPEN_BRACKET);
        register(code++, TeletextAlphaDefinition.CLOSE_BRACKET);
        register(code++, TeletextAlphaDefinition.STAR);
        register(code++, TeletextAlphaDefinition.PLUS);
        register(code++, TeletextAlphaDefinition.COMMA);
        register(code++, TeletextAlphaDefinition.MINUS);
        register(code++, TeletextAlphaDefinition.DOT);
        register(code++, TeletextAlphaDefinition.FORWARD_SLASH);
        register(code++, TeletextAlphaDefinition.ZERO);
        register(code++, TeletextAlphaDefinition.ONE);
        register(code++, TeletextAlphaDefinition.TWO);
        register(code++, TeletextAlphaDefinition.THREE);
        register(code++, TeletextAlphaDefinition.FOUR);
        register(code++, TeletextAlphaDefinition.FIVE);
        register(code++, TeletextAlphaDefinition.SIX);
        register(code++, TeletextAlphaDefinition.SEVEN);
        register(code++, TeletextAlphaDefinition.EIGHT);
        register(code++, TeletextAlphaDefinition.NINE);
        register(code++, TeletextAlphaDefinition.COLON);
        register(code++, TeletextAlphaDefinition.SEMICOLON);
        register(code++, TeletextAlphaDefinition.LESS_THAN);
        register(code++, TeletextAlphaDefinition.EQUALS);
        register(code++, TeletextAlphaDefinition.GREATER_THAN);
        register(code++, TeletextAlphaDefinition.QUESTION_MARK);
        register(code++, TeletextAlphaDefinition.AT);
        register(code++, TeletextAlphaDefinition.UPPER_A);
        register(code++, TeletextAlphaDefinition.UPPER_B);
        register(code++, TeletextAlphaDefinition.UPPER_C);
        register(code++, TeletextAlphaDefinition.UPPER_D);
        register(code++, TeletextAlphaDefinition.UPPER_E);
        register(code++, TeletextAlphaDefinition.UPPER_F);
        register(code++, TeletextAlphaDefinition.UPPER_G);
        register(code++, TeletextAlphaDefinition.UPPER_H);
        register(code++, TeletextAlphaDefinition.UPPER_I);
        register(code++, TeletextAlphaDefinition.UPPER_J);
        register(code++, TeletextAlphaDefinition.UPPER_K);
        register(code++, TeletextAlphaDefinition.UPPER_L);
        register(code++, TeletextAlphaDefinition.UPPER_M);
        register(code++, TeletextAlphaDefinition.UPPER_N);
        register(code++, TeletextAlphaDefinition.UPPER_O);
        register(code++, TeletextAlphaDefinition.UPPER_P);
        register(code++, TeletextAlphaDefinition.UPPER_Q);
        register(code++, TeletextAlphaDefinition.UPPER_R);
        register(code++, TeletextAlphaDefinition.UPPER_S);
        register(code++, TeletextAlphaDefinition.UPPER_T);
        register(code++, TeletextAlphaDefinition.UPPER_U);
        register(code++, TeletextAlphaDefinition.UPPER_V);
        register(code++, TeletextAlphaDefinition.UPPER_W);
        register(code++, TeletextAlphaDefinition.UPPER_X);
        register(code++, TeletextAlphaDefinition.UPPER_Y);
        register(code++, TeletextAlphaDefinition.UPPER_Z);
        register(code++, TeletextAlphaDefinition.LEFT_ARROW);
        register(code++, TeletextAlphaDefinition.HALF);
        register(code++, TeletextAlphaDefinition.RIGHT_ARROW);
        register(code++, TeletextAlphaDefinition.UP_ARROW);
        register(code++, TeletextAlphaDefinition.HASH);
        register(code++, TeletextAlphaDefinition.UNDERSCORE);
        register(code++, TeletextAlphaDefinition.LOWER_A);
        register(code++, TeletextAlphaDefinition.LOWER_B);
        register(code++, TeletextAlphaDefinition.LOWER_C);
        register(code++, TeletextAlphaDefinition.LOWER_D);
        register(code++, TeletextAlphaDefinition.LOWER_E);
        register(code++, TeletextAlphaDefinition.LOWER_F);
        register(code++, TeletextAlphaDefinition.LOWER_G);
        register(code++, TeletextAlphaDefinition.LOWER_H);
        register(code++, TeletextAlphaDefinition.LOWER_I);
        register(code++, TeletextAlphaDefinition.LOWER_J);
        register(code++, TeletextAlphaDefinition.LOWER_K);
        register(code++, TeletextAlphaDefinition.LOWER_L);
        register(code++, TeletextAlphaDefinition.LOWER_M);
        register(code++, TeletextAlphaDefinition.LOWER_N);
        register(code++, TeletextAlphaDefinition.LOWER_O);
        register(code++, TeletextAlphaDefinition.LOWER_P);
        register(code++, TeletextAlphaDefinition.LOWER_Q);
        register(code++, TeletextAlphaDefinition.LOWER_R);
        register(code++, TeletextAlphaDefinition.LOWER_S);
        register(code++, TeletextAlphaDefinition.LOWER_T);
        register(code++, TeletextAlphaDefinition.LOWER_U);
        register(code++, TeletextAlphaDefinition.LOWER_V);
        register(code++, TeletextAlphaDefinition.LOWER_W);
        register(code++, TeletextAlphaDefinition.LOWER_X);
        register(code++, TeletextAlphaDefinition.LOWER_Y);
        register(code++, TeletextAlphaDefinition.LOWER_Z);
        register(code++, TeletextAlphaDefinition.QUARTER);
        register(code++, TeletextAlphaDefinition.PIPE);
        register(code++, TeletextAlphaDefinition.THREE_QUARTERS);
        register(code++, TeletextAlphaDefinition.DIVIDE);

        code = 160;

        register(code++, TeletextAlphaDefinition.SPACE);
        register(code++, TeletextAlphaDefinition.EXCLAMATION_MARK);
        register(code++, TeletextAlphaDefinition.DOUBLE_QUOTE);
        register(code++, TeletextAlphaDefinition.POUND);
        register(code++, TeletextAlphaDefinition.DOLLAR);
        register(code++, TeletextAlphaDefinition.PERCENT);
        register(code++, TeletextAlphaDefinition.AMPERSAND);
        register(code++, TeletextAlphaDefinition.SINGLE_QUOTE);
        register(code++, TeletextAlphaDefinition.OPEN_BRACKET);
        register(code++, TeletextAlphaDefinition.CLOSE_BRACKET);
        register(code++, TeletextAlphaDefinition.STAR);
        register(code++, TeletextAlphaDefinition.PLUS);
        register(code++, TeletextAlphaDefinition.COMMA);
        register(code++, TeletextAlphaDefinition.MINUS);
        register(code++, TeletextAlphaDefinition.DOT);
        register(code++, TeletextAlphaDefinition.FORWARD_SLASH);
        register(code++, TeletextAlphaDefinition.ZERO);
        register(code++, TeletextAlphaDefinition.ONE);
        register(code++, TeletextAlphaDefinition.TWO);
        register(code++, TeletextAlphaDefinition.THREE);
        register(code++, TeletextAlphaDefinition.FOUR);
        register(code++, TeletextAlphaDefinition.FIVE);
        register(code++, TeletextAlphaDefinition.SIX);
        register(code++, TeletextAlphaDefinition.SEVEN);
        register(code++, TeletextAlphaDefinition.EIGHT);
        register(code++, TeletextAlphaDefinition.NINE);
        register(code++, TeletextAlphaDefinition.COLON);
        register(code++, TeletextAlphaDefinition.SEMICOLON);
        register(code++, TeletextAlphaDefinition.LESS_THAN);
        register(code++, TeletextAlphaDefinition.EQUALS);
        register(code++, TeletextAlphaDefinition.GREATER_THAN);
        register(code++, TeletextAlphaDefinition.QUESTION_MARK);
        register(code++, TeletextAlphaDefinition.AT);
        register(code++, TeletextAlphaDefinition.UPPER_A);
        register(code++, TeletextAlphaDefinition.UPPER_B);
        register(code++, TeletextAlphaDefinition.UPPER_C);
        register(code++, TeletextAlphaDefinition.UPPER_D);
        register(code++, TeletextAlphaDefinition.UPPER_E);
        register(code++, TeletextAlphaDefinition.UPPER_F);
        register(code++, TeletextAlphaDefinition.UPPER_G);
        register(code++, TeletextAlphaDefinition.UPPER_H);
        register(code++, TeletextAlphaDefinition.UPPER_I);
        register(code++, TeletextAlphaDefinition.UPPER_J);
        register(code++, TeletextAlphaDefinition.UPPER_K);
        register(code++, TeletextAlphaDefinition.UPPER_L);
        register(code++, TeletextAlphaDefinition.UPPER_M);
        register(code++, TeletextAlphaDefinition.UPPER_N);
        register(code++, TeletextAlphaDefinition.UPPER_O);
        register(code++, TeletextAlphaDefinition.UPPER_P);
        register(code++, TeletextAlphaDefinition.UPPER_Q);
        register(code++, TeletextAlphaDefinition.UPPER_R);
        register(code++, TeletextAlphaDefinition.UPPER_S);
        register(code++, TeletextAlphaDefinition.UPPER_T);
        register(code++, TeletextAlphaDefinition.UPPER_U);
        register(code++, TeletextAlphaDefinition.UPPER_V);
        register(code++, TeletextAlphaDefinition.UPPER_W);
        register(code++, TeletextAlphaDefinition.UPPER_X);
        register(code++, TeletextAlphaDefinition.UPPER_Y);
        register(code++, TeletextAlphaDefinition.UPPER_Z);
        register(code++, TeletextAlphaDefinition.LEFT_ARROW);
        register(code++, TeletextAlphaDefinition.HALF);
        register(code++, TeletextAlphaDefinition.RIGHT_ARROW);
        register(code++, TeletextAlphaDefinition.UP_ARROW);
        register(code++, TeletextAlphaDefinition.HASH);
        register(code++, TeletextAlphaDefinition.UNDERSCORE);
        register(code++, TeletextAlphaDefinition.LOWER_A);
        register(code++, TeletextAlphaDefinition.LOWER_B);
        register(code++, TeletextAlphaDefinition.LOWER_C);
        register(code++, TeletextAlphaDefinition.LOWER_D);
        register(code++, TeletextAlphaDefinition.LOWER_E);
        register(code++, TeletextAlphaDefinition.LOWER_F);
        register(code++, TeletextAlphaDefinition.LOWER_G);
        register(code++, TeletextAlphaDefinition.LOWER_H);
        register(code++, TeletextAlphaDefinition.LOWER_I);
        register(code++, TeletextAlphaDefinition.LOWER_J);
        register(code++, TeletextAlphaDefinition.LOWER_K);
        register(code++, TeletextAlphaDefinition.LOWER_L);
        register(code++, TeletextAlphaDefinition.LOWER_M);
        register(code++, TeletextAlphaDefinition.LOWER_N);
        register(code++, TeletextAlphaDefinition.LOWER_O);
        register(code++, TeletextAlphaDefinition.LOWER_P);
        register(code++, TeletextAlphaDefinition.LOWER_Q);
        register(code++, TeletextAlphaDefinition.LOWER_R);
        register(code++, TeletextAlphaDefinition.LOWER_S);
        register(code++, TeletextAlphaDefinition.LOWER_T);
        register(code++, TeletextAlphaDefinition.LOWER_U);
        register(code++, TeletextAlphaDefinition.LOWER_V);
        register(code++, TeletextAlphaDefinition.LOWER_W);
        register(code++, TeletextAlphaDefinition.LOWER_X);
        register(code++, TeletextAlphaDefinition.LOWER_Y);
        register(code++, TeletextAlphaDefinition.LOWER_Z);
        register(code++, TeletextAlphaDefinition.QUARTER);
        register(code++, TeletextAlphaDefinition.PIPE);
        register(code++, TeletextAlphaDefinition.THREE_QUARTERS);
        register(code++, TeletextAlphaDefinition.DIVIDE);
        register(code++, TeletextAlphaDefinition.BLOCK);
    }

    TextCellProcessorSet() {
        super(MAP);
    }

    private static void register(final int code, final AlphaDefinition characterSpec) {
        MAP.put(code, new TextCellProcessor(characterSpec));
    }
}
